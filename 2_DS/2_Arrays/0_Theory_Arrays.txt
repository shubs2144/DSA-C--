C++ Arrays


### An array is a collection of items stored at contiguous memory locations.
### An array is a special variable, which can hold more than one value at a time. It is a collection of data items of the same type.
### Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.

To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store:

string cars[4];

### In the example above, we declared a variable named cars that can hold four strings. The number in the square brackets indicates how many elements the array can hold.

string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};

### To create an array of three integers, you could write:

int myNum[3] = {10, 20, 30};

### Access the Elements of an Array
### You access an array element by referring to the index number inside square brackets [].

### This statement accesses the value of the first element in cars:

Example
string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};
cout << cars[0];

### Outputs Volvo
Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.

### Change an Array Element
### To change the value of a specific element, refer to the index number:

cars[0] = "Opel";
Example
string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};
cars[0] = "Opel";
cout << cars[0];

### Now outputs Opel instead of Volvo


### in array memory wastege possible

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 ------>  Arrays vs Vectors in C++ (From an Interview Perspective)

| Feature            | **Array**                                                | **Vector (STL)**                                      |
| ------------------ | -------------------------------------------------------- | ----------------------------------------------------- |
| **Definition**     | Fixed-size collection of same-type elements              | Dynamic-size container (resizable array)              |
| **Size**           | Must be known at compile time                            | Can grow or shrink at runtime                         |
| **Memory**         | Stored in stack (static arrays) or heap (dynamic arrays) | Always stored in heap                                 |
| **Declaration**    | `int arr[5];`                                            | `vector<int> v;`                                      |
| **Resizing**       | Not resizable                                            | `v.push_back()`, `v.pop_back()`                       |
| **STL Functions**  | No built-in functions                                    | Has rich member functions (`size()`, `clear()`, etc.) |
| **Safety**         | No bounds checking                                       | Can use `at()` for safe access                        |
| **Performance**    | Slightly faster due to no overhead                       | Slightly slower (but negligible)                      |
| **Usage Scenario** | When size is fixed and performance is key                | When size may change or needs flexibility             |


âœ… When to Use What?
ðŸ”¸ Use Array when:
Size is known and constant (e.g., int arr[1000])

You want slightly better performance (competitive programming)

Memory overhead must be minimized

Using embedded systems or memory-constrained environments

ðŸ”¹ Use Vector when:
Size is not known at compile-time

You need to dynamically grow/shrink the container

You want convenience: STL functions like sort(), reverse(), insert(), etc.

Safety is a concern (bounds-checked v.at() access)

ðŸ’¡ Interview Insight (Theory + Application)
Common Interview Points:
What happens when a vector resizes?

Internally, a new array with more space is created (usually double the previous size), and all old elements are copied.

So, push_back() is amortized O(1), not always O(1).

Memory management:

Vectors handle their own memory; arrays do not.

Arrays declared like int arr[n]; with runtime n may cause errors in some compilers (non-standard).

Passing to functions:

Arrays decay to pointers (int arr[] becomes int*), size info is lost.

Vectors retain size and type, making them safer and more intuitive to pass.

Use in STL algorithms:

Vectors integrate easily with STL: sort(v.begin(), v.end())

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

âœ… What is a 2D Array?
 
A 2D array is an array of arrays. It's like a matrix with rows and columns.

Syntax:


dataType arrayName[rows][cols];
Example:

int arr[2][3]; // 2 rows, 3 columns
âœ… Accessing Elements:
You can access elements using row and column indices (0-based indexing):


arr[0][1] = 5;       // Assigning value
cout << arr[0][1];   // Accessing value
âœ… Taking Input with cin:

for(int i = 0; i < 2; i++) {
    for(int j = 0; j < 3; j++) {
        cin >> arr[i][j];
    }
}
âœ… Printing with cout:

for(int i = 0; i < 2; i++) {
    for(int j = 0; j < 3; j++) {
        cout << arr[i][j] << " ";
    }
    cout << endl;
}
âœ… Example Output:
If input is:

1 2 3
4 5 6
Output will be:

1 2 3
4 5 6


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

âœ… 2D Vector in C++ â€“ Short Theory
A 2D vector is a vector of vectors â€” dynamic version of a 2D array.

It allows resizable rows and columns, unlike fixed-size arrays.

âœ… Declaration:

vector<vector<int>> vec;
To create a 2D vector of size m x n (e.g., 3x4) initialized with 0:


vector<vector<int>> vec(3, vector<int>(4, 0));
âœ… Accessing Elements:

vec[i][j] = value;     // Assign value
cout << vec[i][j];     // Access value
âœ… Taking Input:

for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
        cin >> vec[i][j];
    }
}
âœ… Benefits:
Auto memory management

Supports dynamic resizing (push_back)

Easier for competitive coding and STL functions